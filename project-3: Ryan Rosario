///////Ryan Rosario
///////Project-3

////Globals
Ball a,b,c,d,e,f;
Rodent mouse;
Bird pigeon;
Button bR, bW, bM, bB;
////Table
float left, right, top, bottom;
float middle;
boolean wall=true;
int tableRed=173, tableGreen=75, tableBlue=255;
///Count
int score= 0;

void setup() {
  size(700, 500);
   left= 50;
   right= width-50;
   top= 100;
   bottom= height-50;
   middle= right - left/2;
///Cue
   a= new Ball();
   a.r=255;
   a.g=255;
   a.b=255;
///Red Ball   
   b= new Ball();
   b.r=255;
   b.name= "1";
///Green ball
   c= new Ball();
   c.g=255;
   c.name= "2";
///Blue ball
   d= new Ball();
   d.b=255;
   d.name= "3";
///Yellow ball
   e= new Ball();
   e.r=255;
   e.g=255;
   e.name= "4";
///Violet ball
   f= new Ball();
   f.r=255;
   f.b=255;
   f.name= "5";

///Rodent
   mouse= new Rodent();
///Bird
   pigeon= new Bird();
////Buttons
///Reset   
   bR= new Button();
   bR.g=255;
   bR.name= "Reset (or press 'r')";
///Wall
   bW= new Button();
   bW.r=255;
   bW.name= "Wall (or press'w')";
///Mouse
   bM= new Button();
   bM.r=149;
   bM.g=82;
   bM.b=11;
   bM.name= "Mouse (or press 'm')";
///Bird
   bB=new Button();
   bB.b=255;
   bB.name= "Bird/bomb (or press 'b')";
   //
   reset();
}

void reset(){
  a.x=100; a.y=280; a.dx=0; a.dy=0;
  b.reset();
  c.reset();
  d.reset();
  e.reset();
  f.reset();
  mouse.reset();
  pigeon.reset();
  bR.reset();
  bW.x1=185; bW.x2=320; bW.y1=30; bW.y2=60;
  bM.x1=325; bM.x2=465; bM.y1=30; bM.y2=60;
  bB.x1=470; bB.x2=610; bB.y1=30; bB.y2=60;
///wall
   wall=true;
///color
   tableRed=173; tableGreen=75; tableBlue=255;
///count
   score= 0;
}
/////Handlers: Keys, Clicks
 void keyPressed() {
   if(key == 'q') {
      exit();
   }
   if(key == 'r') {
     reset();
   }
///Remove wall   
   if(key == 'w') {
     wall=false;
   }
///Release mouse   
   if(key == 'm') {
     mouse.dx=5;
     mouse.dy=3;
   }
///Release bird   
   if(key == 'b'&& pigeon.dx == 0) {
     pigeon.dx=3;
   }
///Drop bomb   
   if(key == 'b'&& pigeon.x > 0) {
     pigeon.payload();
 }
 }
 
 void mousePressed(){
   if(pigeon.hit(mouseX, mouseY)){ /////drop bomb
     pigeon.payload();
   }
   if(mouse.hit(mouseX, mouseY)){ ////catch mouse
     mouse.reset();
   }
   ////balls:reset position
   if(a.hit(mouseX, mouseY)){
      a.x=100; a.y=280; a.dx=0; a.dy=0;
      score -= 5;}
   if(b.hit(mouseX, mouseY)){
      b.reset();
      score -= 5;}
   if(c.hit(mouseX,mouseY)){
     c.reset();
     score -= 5;}
   if(d.hit(mouseX,mouseY)){
     d.reset();
     score -= 5;}
   if(f.hit(mouseX,mouseY)){
     f.reset();
     score -= 5;}
   if(e.hit(mouseX,mouseY)){
     e.reset();
     score -= 5;}
   ////buttons
   if(mouseX > bR.x1 && mouseX < bR.x2 && mouseY > bR.y1 && mouseY < bR.y2 ) {      //// reset table
        reset();}
   
   if(mouseX > bW.x1 && mouseX < bW.x2 && mouseY > bW.y1 && mouseY < bW.y2 ) {     //// remove wall
        wall=false;}
   
   if(mouseX > bM.x1 && mouseX < bM.x2 && mouseY > bM.y1 && mouseY < bM.y2 ) {    //// release rodent
     mouse.dx=5;
     mouse.dy=3;}       
   
   if(mouseX > bB.x1 && mouseX < bB.x2 && mouseY > bB.y1 && mouseY < bB.y2 && pigeon.dx == 0 ) {     //// release bird
       pigeon.dx=3;}  
    
   if(mouseX > bB.x1 && mouseX < bB.x2 && mouseY > bB.y1 && mouseY < bB.y2 && pigeon.x>0 ){   ////drop bomb
      pigeon.payload();}
     
   
   
        
  }
 
 
 
///Functions 
 void draw(){
     background( #19F5E0 );
     rectMode( CORNERS );
     table(left, top, right, bottom);
     balls();
     button();
     rodent();
     bird();
     grass();
     count();
 }
////Scene: Table and wall
 void table( float east, float north, float west, float south ) {
  fill( tableRed, tableGreen, tableBlue );    // pool table
  strokeWeight(20);
  stroke( 127, 0, 0 );      // Brown walls
  rect( east-20, north-20, west+20, south+20 );
 

 if (wall) {
    float middle=  (east+west)/2;    
    stroke( 0, 127, 0 );
    line( middle,north+10, middle,south-10 );
  } else wall = false; 
   stroke(0);
   strokeWeight(1);
 }
////Show: Balls, Rodent, Bird 
 void balls() {
   a.move();
   b.move();
   c.move();
   d.move();
   e.move();
   f.move();
   collision(a,b);
   collision(a,c);
   collision(a,d);
   collision(a,e);
   collision(a,f);
   collision(b,c);
   collision(b,d);
   collision(b,e);
   collision(b,f);
   collision(c,d);
   collision(c,e);
   collision(c,f);
   collision(d,e);
   collision(d,f);
   collision(e,f);
   //
   a.show();
   b.show();
   c.show();
   d.show();
   e.show();
   f.show();
 }
 
 void button(){
   bR.show();
   bW.show();
   bM.show();
   bB.show();
 }
   
   
 
 void rodent() {
    snatch(mouse,a);
    snatch(mouse,b);
    snatch(mouse,c);
    snatch(mouse,d);
    snatch(mouse,e);
    snatch(mouse,f);
    //
    mouse.show();
    mouse.move();
 }
 void bird() {
    kablooey(pigeon,a);
    kablooey(pigeon,b);
    kablooey(pigeon,c);
    kablooey(pigeon,d);
    kablooey(pigeon,e);
    kablooey(pigeon,f);
    //
    pigeon.show();
    pigeon.move();
 }
   
////Elastic collisions, Rodent collision 
 void collision(Ball p, Ball q) {
   if(p.hit( q.x, q.y) ) {
     float tmp;
     tmp=p.dx; p.dx=q.dx; q.dx=tmp;
     tmp=p.dy; p.dy=q.dy; q.dy=tmp;
     score += 1;
   }
  }
  
  void snatch(Rodent mouse, Ball t) {
    if(mouse.hit(t.x, t.y)) {
      t.dx=0; t.dy=0; 
      score -= 10;
    }
 }
  
  void kablooey(Bird pigeon, Ball u){
     if(dist(pigeon.x, pigeon.bombY, u.x, u.y)<30) {
       pigeon.bombY=0; pigeon.bombDY=0; 
       score += 10;
     }
  }
    
  void grass(){
   stroke(#469B16); 
   strokeWeight(5);
   ////grass
int grassy=475;
int grassx=1;
int spacing=6;
int len=150;
int endLegs=699;
   while(grassx <= endLegs) {
     line(grassx,grassy,grassx,grassy+len);
     grassx=grassx+spacing;
   }
  }
  
  void count(){
  fill(0);     text(score, 650, 50);
  }
  
 
 
 


/////Classes  
 class Ball {
  //// PROPERTIES:  position, speed, color, etc. ////   (What a Ball "has".)
  float x,y, dx,dy;
  int r,g,b;
  String name="";
  
  
  //// METHODS
  void show() {
    fill(r,g,b);
    ellipse( x,y, 30,30 );
    fill(0);
    text( name, x-5,y );
  }
  void move() {
    if(wall) {
    if (x>right || x<width/1.9) {  dx=  -dx; }
    if (y>bottom || y<top) {  dy=  -dy; }
    }
    else {
    if (x>right || x<left) {  dx=  -dx; }
    if (y>bottom || y<top) {  dy=  -dy; }
    }

    
    x += dx;
    y += dy;
  }
  void reset() {
    x=  random(middle, right);
    y=  random( top, bottom );
    dx=  random( 1,3);
    dy=  random( 1,3 );
  }

  
  boolean hit( float x, float y ) {
    if (  dist( x,y, this.x,this.y ) < 30 ) return true;
    else return false;
  }
}

class Button {
  float x1, y1, x2, y2;
  int r,g,b;
  String name="";

////Methods
  void show(){     
  fill(r,g,b);
  rect(x1,y1,x2,y2);
  fill(0); text(name, x1+10, y1+20);
  }
  
  void reset(){
  x1=40; x2=180;
  y1=30; y2=60;
}
}
   

class Rodent{
////Properties   
  float x, y, dx, dy;

////Methods
  void show(){
    fill(#AA5D29);                     ellipse(x,y, 60, 30);//// Rodent body
    fill(#FF55F7);                     ellipse(x+20, y-15, 10,20);//// Rodent left ear
    fill(#FF55F7);                     ellipse(x+40, y-15, 10,20);//// Rodent right ear
    fill( #AA5D29);                    ellipse(x+30, y-10, 40,20); ///// Rodent head
    fill(#FF55F7);                     ellipse(x+50, y-10, 5,5);   ///// Rodent nose
    fill(0);                           ellipse(x+35, y-15, 5,5);  ///// Rodent eye
    stroke(#FF55F7); strokeWeight(2);  line(x-30, y, x-50, y+30); ////Rodent tail
    stroke(0);///color Rodent legs black
//////Rodent animation: leg movement
    if(frameCount % 30 > 15){ 
///Rodent legs first position
    line( x-20, y+10, x-30, y+20);
    line(x+20, y+10, x+30, y+20);}
///Rodent leg second position
    else{line( x-10, y+10, x-10, y+20);
   }
  }
 
 void move(){
///mouse remains on table
   if (y>bottom || y<top) {  dy=  -dy; }
///reset mouse position without resetting entire program   
   if(x>width) {reset();}
   x+=dx;
   y+=dy;
 
   
 }
    

  void reset(){
///mouse is not a nusance until button is pressed
    x=width-790; y=random(top,bottom);
    dx=0; dy=0;
  }
  
  boolean hit( float x, float y ) {
    if (  dist( x,y, this.x,this.y ) < 30 ) return true;
    else return false;
 }
}

class Bird {
////Properties
  float x, y, dx, dy;
  float bombY=0, bombDY=0;
  float grav=9.81/60;

////Methods
  void show() {
    fill(#7C95AF);     ellipse(x,y, 40, 20);///body
    if(dx == -3 ){
    fill(#7C95AF);     ellipse(x-20,y-10, 20, 20); }////head facing right
    else{
    fill(#7C95AF);     ellipse(x+20,y-10, 20,20);}///head facing left
   ///wings   
   if(frameCount % 30 > 15){ 
    fill(#1665B7); triangle(x-10,y, x, y+25,  x+10, y);
   }
   else{fill(#1665B7); triangle(x-10, y, x, y-25, x+10, y);
   }
   ///bomb
   if(bombDY != 0){
    fill(#B26C16); ellipse(x-2, bombY-25, 3, 25);///fuse;
    fill(#202236); ellipse(x,bombY, 30,30);///case
  }
}

  void move() {
   ///bird
   if( x>width) { dx= -dx;}
   if(dx == -3 && x<0) {dx= -dx;} 
     x+=dx;
   ///bomb
   if(bombDY != 0){ 
       bombY += bombDY;
       bombDY+=grav;
   }
   if(bombY>height){
     bombY=0;
     bombDY=0;
   }
  }
  
  void payload(){
    bombY=y+10;
    bombDY= grav;
    
  }
 
 
  void reset() {
    x = width-740; y=35;
    dx=0;
    bombDY=0;
  }
 boolean hit( float x, float y ) {
    if (  dist( x,y, this.x,this.y ) < 30 ) return true;
    else return false;
 }
}

 
   
       
    


  
 
   
   




